name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to production environment'
        required: true
        default: 'yes'
        type: choice
        options:
        - 'yes'
        - 'no'

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test
    
    - name: Install infrastructure dependencies
      run: |
        cd infrastructure
        npm ci
    
    - name: Build infrastructure
      run: |
        cd infrastructure
        npm run build
    
    - name: Test infrastructure
      run: |
        cd infrastructure
        npm run test

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run KICS Security Scan
      uses: checkmarx/kics-github-action@v2.1.0
      with:
        path: '.'
        output_path: 'kics-results'
        output_formats: 'json,sarif'
        exclude_paths: 'node_modules,dist,build,docs,coverage'
        exclude_queries: 'a88baa34-e2ad-44ea-ad6f-8cac87bc7c71,555ab8f9-2001-455e-a077-f2d0f41e2fb9'
        fail_on: 'high,medium'
    
    - name: Upload KICS results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kics-results
        path: kics-results/

  deploy-development:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials for Development
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::237124340260:role/GitHubActionsOIDCRole
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install CDK
      run: npm install -g aws-cdk
    
    - name: Install infrastructure dependencies
      run: |
        cd infrastructure
        npm ci
    
    - name: Build infrastructure
      run: |
        cd infrastructure
        npm run build
    
    - name: Bootstrap CDK (if needed)
      run: |
        npx cdk bootstrap --app "npx ts-node --prefer-ts-exts infrastructure/bin/infrastructure.ts" --context environment=development
    
    - name: Deploy infrastructure to development
      run: |
        npx cdk deploy --app "npx ts-node --prefer-ts-exts infrastructure/bin/infrastructure.ts" --context environment=development --require-approval never
    
    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ **Development Environment Deployed**\n\nThe infrastructure has been successfully deployed to the development environment.\n\n- Stack: `ReportBuilderStack-development`\n- Account: `237124340260`\n- Region: `${{ env.AWS_REGION }}`\n- Commit: `${{ github.sha }}`\n\n**Next Steps:**\n1. Check Parameter Store for configured email addresses\n2. Test email processing by sending to the configured development email address'
            });
          } catch (error) {
            console.log('Could not post comment to PR:', error.message);
            console.log('Deployment was successful despite comment failure');
          }

  deploy-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'yes'
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials for Production
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::400534944857:role/GitHubActionsOIDCRole
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install CDK
      run: npm install -g aws-cdk
    
    - name: Install infrastructure dependencies
      run: |
        cd infrastructure
        npm ci
    
    - name: Build infrastructure
      run: |
        cd infrastructure
        npm run build
    
    - name: Bootstrap CDK (if needed)
      run: |
        cd infrastructure
        npx cdk bootstrap --context environment=production
    
    - name: Deploy infrastructure to production
      run: |
        npx cdk deploy --app "npx ts-node --prefer-ts-exts infrastructure/bin/infrastructure.ts" --context environment=production --require-approval never

  release:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'yes'
    permissions:
      contents: write
      pull-requests: read
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate release version
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Check commit messages for version bump type
        COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s" 2>/dev/null || git log --pretty=format:"%s")
        
        if echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?!:|^BREAKING CHANGE:|^.+!:"; then
          # Major version bump for breaking changes
          NEW_VERSION="$((MAJOR + 1)).0.0"
        elif echo "$COMMITS" | grep -qE "^(feat|feature)(\(.+\))?:"; then
          # Minor version bump for new features
          NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
        else
          # Patch version bump for fixes and other changes
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        fi
        
        echo "New version: v$NEW_VERSION"
        echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.version.outputs.version }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "## Changes in this Release

        Infrastructure deployed to production environment.
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.previous_version }}...${{ steps.version.outputs.version }}" \
          --latest 